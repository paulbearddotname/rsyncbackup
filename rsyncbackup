#!/bin/bash

# Copyright (c) 2017 Paul Beard. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

# fe290dde64bb3617

usage ()
{
    echo "rsyncbackup version 1
Copyright (c) 2017 Paul Beard.
Website: paulbeard.name

rsyncbackup is a backup program capable of creating backup directories that mirror the source without duplicating unmodified files.

Usage: $0 [-h] SRC_FROM DEST

Options:
 -h       show this help
 SRC_FROM read source list from file
 DEST     destination directory" >&2
}

while getopts h OPT
do
    case $OPT in
        *)
            usage
            [[ $OPT == h ]]
            exit
            ;;
    esac
done

if [[ $# -ne 2 ]]
then
    usage
    exit 1
fi

SRC_FROM=$1
DEST=$2

if [[ ! -e $DEST ]]
then
    echo 'DEST not found' >&2
    exit 1
fi

START=$(date +%Y-%m-%d-%H%M%S) ||
exit

_trap ()
{
    echo 'Backup interrupted' >&2

    rm -rf -- "${DEST:?}/${START:?}.incomplete"
    exit 1
}
trap _trap HUP INT TERM

echo 'Backup started' >&2

mkdir -- "$DEST/$START.incomplete" ||
exit

IFS=$'\n' read -r -d '' -a DEST_BACKUPS <<EOD
$(find -- "$DEST/" -mindepth 1 -maxdepth 1 -type d -name '[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9]' |
    sort |
    tail -n 20 #rsync link-dest limit is 20
)
EOD

LINK_DESTS=()
for DEST_BACKUP in "${DEST_BACKUPS[@]}"
do
    LINK_DESTS+=(--link-dest "$DEST_BACKUP")
done

rsync -rRlpogtv --no-implied-dirs "${LINK_DESTS[@]}" --files-from "$SRC_FROM" / "$DEST/$START.incomplete/" |
grep -v '/$' #rsync logs too much on macOS

mv    -- "$DEST/$START.incomplete" \
         "$DEST/$START" &&
rm -f -- "$DEST/Latest" &&
ln -s -- "$START" \
         "$DEST/Latest" ||
exit

echo 'Backup complete' >&2

if date -d '1970-01-01 00:00:00' >/dev/null 2>&1 #GNU date
then
    DATE_ISO=(-d)

    DAY_AGO=$(date -d -1day +%s) &&
    MONTH_AGO=$(date -d -1month +%s)
else #BSD date
    DATE_ISO=(-j -f %Y-%m-%d' '%H:%M:%S)

    DAY_AGO=$(date -v -1d +%s) &&
    MONTH_AGO=$(date -v -1m +%s)
fi ||
exit

SRC_C=1 WEEK_C=2 DATE_C=3 TIMESTAMP_C=4 WEEK_I_C=5 DATE_I_C=6

find -- "$DEST/" -mindepth 1 -maxdepth 1 -type d -name '[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9]' |
awk -F '\t' -v 'OFS=\t' -v "P=$DEST" -v "C=$SRC_C" 'BEGIN{L=length(P)}{$C=substr($C,L+1);sub(/^\/+/,"",$C);print}' |
sort -t $'\t' -k $SRC_C,$SRC_C |

awk '$0=substr($0,1,10)" "substr($0,12,2)":"substr($0,14,2)":"substr($0,16,2)' | #%Y-%m-%d-%H%M%S -> %Y-%m-%d %H:%M:%S
xargs -I {} date "${DATE_ISO[@]}" {} +%Y-%m-%d-%H%M%S%t%G%V%t%Y%m%d%t%s | #%Y-%m-%d %H:%M:%S -> %Y-%m-%d-%H%M%S%t%G%V%t%Y%m%d%t%s

awk -F '\t' -v 'OFS=\t' -v "C=$WEEK_C" '{if($C!=P)I=0;P=$C;print$0,I++}' |
awk -F '\t' -v 'OFS=\t' -v "C=$DATE_C" '{if($C!=P)I=0;P=$C;print$0,I++}' |

awk -F '\t' -v "SRC_C=$SRC_C" -v "TIMESTAMP_C=$TIMESTAMP_C" -v "WEEK_I_C=$WEEK_I_C" -v "DATE_I_C=$DATE_I_C" -v "MONTH_AGO=$MONTH_AGO" -v "DAY_AGO=$DAY_AGO" \
    '{if($TIMESTAMP_C<=MONTH_AGO&&$WEEK_I_C!=0||MONTH_AGO<$TIMESTAMP_C&&$TIMESTAMP_C<=DAY_AGO&&$DATE_I_C!=0)print$SRC_C}' |

while read -r BACKUP
do
    echo "Removing old backup: $BACKUP" >&2

    rm -rf -- "${DEST:?}/${BACKUP:?}"
done
